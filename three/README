
Please answer the following questions to explain your implementation (Directly write your answer below the questions).



1. Which are the critical regions need to be protected for mutula exclusion? Why are they? 

The critical regions that need to be protected for mutual exclusion are the areas where the data is either being added or removed from the buffer. The producer and consumer functions are sharing buffer to either insert an item into the buffer or remove an item from the buffer. Due to sharing of this buffer, only one thread at a time should access the critical region to either remove and insert an element into the buffer. Failure to achieve mutual exclusion can give rise to race conditions that is why mutex is required to achieve mutual exclusion.


2. There are 7 requirements your program should achieve: 

1)	When a producer thread inserts a new item into the buffer, a message should be print to screen showing which thread (with ID) insert which item (with value) to which buffer slot (with next_in)
2)	When a consumer thread removes a new item from the buffer, a message should be print to screen showing which thread (with ID) remove which item (with value) from which buffer slot (with next_out)
3)	Producers must block if the buffer is full,
4)	Consumers must block if the buffer is empty,
5)	No two/more producers insert items to the same buffer slot,
6)	No two/more consumers remove the items from the same buffer slot,
7)	The messages must be printed in the order showing the real execution scenarios.

Please explain how they are satisfied in your design (you need to explain one by one!)

1) Whenever an item is inserted into the buffer using the producer function which calls the insert_item function to insert an item into the buffer. The message is printed to the output screen showing the ID of the thread with value of the item (integer in the case) and the next_in which represented the index at which the item is inserted into the buffer. The insert_item() function processes the critical section by inserting data into the buffer and all neccessary printing is handled within function.

2) Whenever an item is removed from the buffer using the consumer function which calls the remove_item function to remove an item into the buffer. The message is printed to the output screen showing the ID of the consumer removed which item (integer in the case) and next_out to indicate the index at which the item is removed from the buffer.The remove_item() function processes the critical section as well by removing an item from buffer and all necessary printing is handled within function.

3) In the insert_item(item, id) function, an item is not inserted into the buffer if it is full. The use of the sem_wait(&empty) at the very beginning of the critical section (item insertion), checks if the value of semaphore "empty" is greater than 0 which means there are available slots in the buffer. As soon as the "empty" turns 0 there are no empty slots and a mutex lock is enabled to disallow a thread to perform an insertion until the consumer code removes an item from the buffer and increments the value of "empty".

4) In the remove_item(item, id) function, an item is not removed from the buffer if it is empty. The use of the sem_wait(&full) at the very beginning of the critical section (item removal), checks if the value of semaphore "full" is greater than 0 which means there are spots filled in the buffer. As soon as the "full" turns 0, it means the buffer is empty therefore, it waits for the producer function to add an item to buffer and increment the value of "full" using the sem_post(&full).

5) To ensure that no two or more producers insert an item to the buffer at the same buffer slot, we use the principle of mutual exclusion, where a mutex is intialized and placed right after sem_wait(&empty) and wait until there are empty slots for insertion and allow only single producer to insert an item into the buffer and unlock after insertion is done. 

6) To ensure that no two or more consumers remove an item from the buffer at the same buffer slot, we use the principle of mutual exclusion, where a mutex is intialized and placed right after sem_wait(&full) and wait until there are filled slots for removal and allow single consumer to remove an item from the buffer and unlock after removal is done.

7) The messages are printed as per the execution order implemented and here is a sample answer:

consumer 0 started!
consumer 4 started!
consumer 1 started!
producer 0 started!
consumer 2 started!
consumer 3 started!
producer 2 started!
producer 2: inserted item 9407 into buffer index 0
producer 1 started!
consumer 4: removed item 9407 from buffer index 0
producer 1: inserted item 7349 into buffer index 1
producer 1: inserted item 5606 into buffer index 2
consumer 1: removed item 7349 from buffer index 1
consumer 1: removed item 5606 from buffer index 2
producer 0: inserted item 3189 into buffer index 3
consumer 4: removed item 3189 from buffer index 3
producer 2: inserted item 5708 into buffer index 4
consumer 2: removed item 5708 from buffer index 4
producer 1: inserted item 120 into buffer index 0
consumer 0: removed item 120 from buffer index 0
producer 0: inserted item 6545 into buffer index 1
producer 0: inserted item 2637 into buffer index 2
consumer 1: removed item 6545 from buffer index 1
consumer 1: removed item 2637 from buffer index 2
producer 1: inserted item 8581 into buffer index 3
producer 1: inserted item 3614 into buffer index 4
consumer 2: removed item 8581 from buffer index 3
consumer 4: removed item 3614 from buffer index 4
producer 1: inserted item 3024 into buffer index 0
consumer 3: removed item 3024 from buffer index 0
producer 2: inserted item 6133 into buffer index 1
consumer 0: removed item 6133 from buffer index 1
producer 0: inserted item 1739 into buffer index 2
consumer 4: removed item 1739 from buffer index 2
producer 1: inserted item 1221 into buffer index 3
consumer 3: removed item 1221 from buffer index 3
producer 0: inserted item 6930 into buffer index 4
producer 0: inserted item 3488 into buffer index 0
consumer 1: removed item 6930 from buffer index 4
consumer 2: removed item 3488 from buffer index 0
producer 2: inserted item 9341 into buffer index 1
producer 2: inserted item 8660 into buffer index 2
consumer 0: removed item 9341 from buffer index 1
consumer 4: removed item 8660 from buffer index 2
producer 1: inserted item 9461 into buffer index 3
consumer 3: removed item 9461 from buffer index 3
producer 0: inserted item 9427 into buffer index 4
consumer 1: removed item 9427 from buffer index 4
producer 2: inserted item 6106 into buffer index 0
consumer 0: removed item 6106 from buffer index 0
producer 1: inserted item 4751 into buffer index 1
consumer 2: removed item 4751 from buffer index 1
producer 2: inserted item 556 into buffer index 2
producer 2: inserted item 5985 into buffer index 3
consumer 4: removed item 556 from buffer index 2
consumer 0: removed item 5985 from buffer index 3
producer 0: inserted item 2277 into buffer index 4
consumer 1: removed item 2277 from buffer index 4
producer 1: inserted item 5588 into buffer index 0
consumer 3: removed item 5588 from buffer index 0
producer 2: inserted item 1505 into buffer index 1
consumer 2: removed item 1505 from buffer index 1
producer 0: inserted item 6517 into buffer index 2
producer 0: inserted item 4434 into buffer index 3
consumer 0: removed item 6517 from buffer index 2
consumer 3: removed item 4434 from buffer index 3
producer 1: inserted item 9906 into buffer index 4
consumer 4: removed item 9906 from buffer index 4
producer 2: inserted item 7378 into buffer index 0
consumer 1: removed item 7378 from buffer index 0
producer 0: inserted item 3920 into buffer index 1
producer 1: inserted item 8608 into buffer index 2
consumer 3: removed item 3920 from buffer index 1
consumer 0: removed item 8608 from buffer index 2
producer 2: inserted item 2786 into buffer index 3
consumer 1: removed item 2786 from buffer index 3
producer 0: inserted item 1416 into buffer index 4
producer 1: inserted item 641 into buffer index 0
consumer 0: removed item 1416 from buffer index 4
producer 1: inserted item 2582 into buffer index 1
consumer 2: removed item 641 from buffer index 0
consumer 3: removed item 2582 from buffer index 1
producer 2: inserted item 3244 into buffer index 2
producer 1: inserted item 4574 into buffer index 3
consumer 4: removed item 3244 from buffer index 2
consumer 0: removed item 4574 from buffer index 3
producer 0: inserted item 8888 into buffer index 4
producer 0: inserted item 4296 into buffer index 0
consumer 3: removed item 8888 from buffer index 4
consumer 2: removed item 4296 from buffer index 0
producer 1: inserted item 8545 into buffer index 1
consumer 1: removed item 8545 from buffer index 1
producer 2: inserted item 9205 into buffer index 2
consumer 2: removed item 9205 from buffer index 2
producer 1: inserted item 9024 into buffer index 3
consumer 3: removed item 9024 from buffer index 3
producer 0: inserted item 9223 into buffer index 4
consumer 4: removed item 9223 from buffer index 4
producer 1: inserted item 381 into buffer index 0
producer 1: inserted item 6747 into buffer index 1
producer 1: inserted item 9844 into buffer index 2
consumer 3: removed item 381 from buffer index 0
consumer 2: removed item 6747 from buffer index 1
consumer 0: removed item 9844 from buffer index 2
producer 2: inserted item 494 into buffer index 3
consumer 4: removed item 494 from buffer index 3
producer 0: inserted item 9260 into buffer index 4
consumer 1: removed item 9260 from buffer index 4
producer 2: inserted item 4284 into buffer index 0
consumer 3: removed item 4284 from buffer index 0
producer 0: inserted item 6686 into buffer index 1
consumer 0: removed item 6686 from buffer index 1
producer 2: inserted item 9361 into buffer index 2
consumer 2: removed item 9361 from buffer index 2
producer 0: inserted item 5189 into buffer index 3
producer 0: inserted item 8086 into buffer index 4
consumer 4: removed item 5189 from buffer index 3
consumer 4: removed item 8086 from buffer index 4
producer 2: inserted item 3661 into buffer index 0
consumer 3: removed item 3661 from buffer index 0
producer 0: inserted item 4146 into buffer index 1
consumer 0: removed item 4146 from buffer index 1
producer 2: inserted item 395 into buffer index 2
consumer 2: removed item 395 from buffer index 2
producer 2: inserted item 4068 into buffer index 3
consumer 1: removed item 4068 from buffer index 3
producer 2: inserted item 4431 into buffer index 4
consumer 2: removed item 4431 from buffer index 4


3) Why you think your design is the most effective one? Is there any other design also works but less effective? 

The design of my program is most effective because all the seven requirements have been addressed in the program and the output of the program is also accurate. The use of both semaphores and mutexes in the program has allowed multiple threads to share a common resource and eliminate any race conditions. I am not sure if there are other ways to design this program. 



